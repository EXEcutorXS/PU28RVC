<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\PU-28.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\PU-28.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue May 02 13:47:59 2023
<BR><P>
<H3>Maximum Stack Usage =        652 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; activityAir() &rArr; Setup::viewScreen() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC0_1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">CAN0_RX1_IRQHandler</a> from can.o(i.CAN0_RX1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[46]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from sensor.o(i.EXTI0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">EXTI10_15_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">EXTI5_9_IRQHandler</a> from sensor.o(i.EXTI5_9_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from core.o(i.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[f]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from core.o(i.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[13]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from core.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[26]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">TIMER0_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">TIMER1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">TIMER5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">TIMER6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">UART3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">UART4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">USART0_IRQHandler</a> from usart.o(i.USART0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">USBD_LP_CAN0_RX0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[e]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[62]">__main</a> from __main.o(!!!main) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[5a]">__sti___10_canvas_cpp_canvas</a> from canvas.o(i.__sti___10_canvas_cpp_canvas) referenced from canvas.o(.init_array)
 <LI><a href="#[4c]">__sti___10_search_cpp_search</a> from search.o(i.__sti___10_search_cpp_search) referenced from search.o(.init_array)
 <LI><a href="#[56]">__sti___10_slider_cpp_slider</a> from slider.o(i.__sti___10_slider_cpp_slider) referenced from slider.o(.init_array)
 <LI><a href="#[4e]">__sti___10_system_cpp_air</a> from system.o(i.__sti___10_system_cpp_air) referenced from system.o(.init_array)
 <LI><a href="#[5f]">__sti___11_display_cpp_display</a> from display.o(i.__sti___11_display_cpp_display) referenced from display.o(.init_array)
 <LI><a href="#[5d]">__sti___11_pgn_rvc_cpp_b5b58dd4</a> from pgn_rvc.o(i.__sti___11_pgn_rvc_cpp_b5b58dd4) referenced from pgn_rvc.o(.init_array)
 <LI><a href="#[57]">__sti___12_checkbox_cpp_checkbox</a> from checkbox.o(i.__sti___12_checkbox_cpp_checkbox) referenced from checkbox.o(.init_array)
 <LI><a href="#[52]">__sti___15_setup_clock_cpp_ccf099aa</a> from setup_clock.o(i.__sti___15_setup_clock_cpp_ccf099aa) referenced from setup_clock.o(.init_array)
 <LI><a href="#[55]">__sti___15_start_timer_cpp_c98decc7</a> from start_timer.o(i.__sti___15_start_timer_cpp_c98decc7) referenced from start_timer.o(.init_array)
 <LI><a href="#[5e]">__sti___15_temperature_cpp_be4e2a6c</a> from temperature.o(i.__sti___15_temperature_cpp_be4e2a6c) referenced from temperature.o(.init_array)
 <LI><a href="#[50]">__sti___16_start_timers_cpp_1ec715f4</a> from start_timers.o(i.__sti___16_start_timers_cpp_1ec715f4) referenced from start_timers.o(.init_array)
 <LI><a href="#[5b]">__sti___7_can_cpp_can</a> from can.o(i.__sti___7_can_cpp_can) referenced from can.o(.init_array)
 <LI><a href="#[60]">__sti___7_hcu_cpp_hcu</a> from hcu.o(i.__sti___7_hcu_cpp_hcu) referenced from hcu.o(.init_array)
 <LI><a href="#[5c]">__sti___7_rvc_cpp_rvc</a> from rvc.o(i.__sti___7_rvc_cpp_rvc) referenced from rvc.o(.init_array)
 <LI><a href="#[59]">__sti___8_core_cpp_core</a> from core.o(i.__sti___8_core_cpp_core) referenced from core.o(.init_array)
 <LI><a href="#[54]">__sti___8_text_cpp_text</a> from text.o(i.__sti___8_text_cpp_text) referenced from text.o(.init_array)
 <LI><a href="#[53]">__sti___9_about_cpp_about</a> from about.o(i.__sti___9_about_cpp_about) referenced from about.o(.init_array)
 <LI><a href="#[58]">__sti___9_clock_cpp_clock</a> from clock.o(i.__sti___9_clock_cpp_clock) referenced from clock.o(.init_array)
 <LI><a href="#[4d]">__sti___9_error_cpp_error</a> from error.o(i.__sti___9_error_cpp_error) referenced from error.o(.init_array)
 <LI><a href="#[51]">__sti___9_setup_cpp_setup</a> from setup.o(i.__sti___9_setup_cpp_setup) referenced from setup.o(.init_array)
 <LI><a href="#[4f]">__sti___9_sleep_cpp_sleep</a> from sleep.o(i.__sti___9_sleep_cpp_sleep) referenced from sleep.o(.init_array)
 <LI><a href="#[61]">__sti___9_usart_cpp_usart</a> from usart.o(i.__sti___9_usart_cpp_usart) referenced from usart.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[66]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[231]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[232]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[67]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[233]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[68]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[234]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[235]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[236]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[237]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[238]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[239]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[23d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[23e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[240]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[241]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[242]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[243]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[244]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[245]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[246]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[247]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[248]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[249]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[24a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[24b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[24c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[24d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[24e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[24f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[65]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[250]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[251]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; activityAir() &rArr; Setup::viewScreen() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[252]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[72]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[253]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[74]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[17f]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::Clock()
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewWeek(bool)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SaveMessage()
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[76]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[78]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[25a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[71]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[25e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[23]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, can.o(i.CAN0_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN0_RX1_IRQHandler &rArr; Can::SaveMessage() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_clear(unsigned, can_interrupt_flag_enum)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get(unsigned, can_interrupt_flag_enum)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive(unsigned, unsigned char, can_receive_message_struct*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SaveMessage()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sensor.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get(unsigned, unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear(exti_line_enum)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get(exti_line_enum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sensor.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI5_9_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear(exti_line_enum)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get(exti_line_enum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, core.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, core.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::incTick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, system_gd32f30x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::initialize()
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config()
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>USART0_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, usart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear(unsigned, unsigned)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get(unsigned, unsigned)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive(unsigned)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::receiveIntHandler(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::transmitNextByte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>adc_deinit(unsigned)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gd32f30x_adc.o(i._Z10adc_deinitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_deinit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable(rcu_periph_reset_enum)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable(rcu_periph_reset_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[12c]"></a>adc_enable(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z10adc_enablej))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[8e]"></a>bkp_deinit()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32f30x_bkp.o(i._Z10bkp_deinitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_deinit()
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_enable()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
</UL>

<P><STRONG><a name="[91]"></a>can_deinit(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32f30x_can.o(i._Z10can_deinitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable(rcu_periph_reset_enum)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable(rcu_periph_reset_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
</UL>

<P><STRONG><a name="[92]"></a>dma_deinit(unsigned, dma_channel_enum)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z10dma_deinitj16dma_channel_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit(unsigned, dma_channel_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[96]"></a>fmc_unlock()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i._Z10fmc_unlockv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewKey()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewId()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
</UL>

<P><STRONG><a name="[94]"></a>i2c_deinit(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32f30x_i2c.o(i._Z10i2c_deinitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_deinit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable(rcu_periph_reset_enum)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable(rcu_periph_reset_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
</UL>

<P><STRONG><a name="[1c6]"></a>i2c_enable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z10i2c_enablej))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f0]"></a>spi_enable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(i._Z10spi_enablej))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[1f1]"></a>timer_init(unsigned, timer_parameter_struct*)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z10timer_initjP22timer_parameter_struct))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[95]"></a>writeSetup()</STRONG> (Thumb, 386 bytes, Stack size 368 bytes, main.o(i._Z10writeSetupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = writeSetup() &rArr; fmc_word_program(unsigned, unsigned) &rArr; fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program(unsigned, unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase(unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_get(unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSetup()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetup()
</UL>

<P><STRONG><a name="[9b]"></a>activityAir()</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, main.o(i._Z11activityAirv))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = activityAir() &rArr; Setup::viewScreen() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setPosition(short)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::viewScreen()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>adc_disable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z11adc_disablej))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[a3]"></a>ConfigFilter(unsigned, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, can.o(i._Z12ConfigFilterjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConfigFilter(unsigned, unsigned char) &rArr; can_struct_para_init(can_struct_type_enum, void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init(can_struct_type_enum, void*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init(can_filter_parameter_struct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
</UL>

<P><STRONG><a name="[97]"></a>fmc_flag_get(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i._Z12fmc_flag_getj))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewKey()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewId()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
</UL>

<P><STRONG><a name="[159]"></a>gpio_bit_set(unsigned, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i._Z12gpio_bit_setjj))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initialize()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelDouble(short, short, unsigned, unsigned)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelCount(short, short, unsigned*, unsigned char)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::clearDot(unsigned short, unsigned short, char, char)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::powerUp()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initSpi()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::volatileWriteEnable()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeDisable()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeEnable()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[a6]"></a>handlerClock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i._Z12handlerClockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = handlerClock() &rArr; Clock::handler() &rArr; Clock::timeUpdate() &rArr; UnixTime::timerToCal(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>handlerSleep()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._Z12handlerSleepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = handlerSleep() &rArr; Sleep::viewScreen() &rArr; Clock::viewAnClock(unsigned char) &rArr; Clock::viewCenterDigClock(char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::checkSleepMode()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::viewScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>handlerTimer()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i._Z12handlerTimerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handlerTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>handlerUsart()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i._Z12handlerUsartv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = handlerUsart() &rArr; Hcu::handler() &rArr; Hcu::parsing() &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ca]"></a>i2c_flag_get(unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gd32f30x_i2c.o(i._Z12i2c_flag_getjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_flag_get(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ae]"></a>timer_deinit(unsigned)</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f30x_timer.o(i._Z12timer_deinitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable(rcu_periph_reset_enum)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable(rcu_periph_reset_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[145]"></a>timer_enable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z12timer_enablej))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::initialize()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayUs(unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[af]"></a>usart_deinit(unsigned)</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f30x_usart.o(i._Z12usart_deinitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable(rcu_periph_reset_enum)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable(rcu_periph_reset_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[1a4]"></a>usart_enable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z12usart_enablej))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::changeBaudrate(unsigned)
</UL>

<P><STRONG><a name="[b0]"></a>activityAbout()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i._Z13activityAboutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = activityAbout() &rArr; System::viewScreen(bool) &rArr; Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Slider::drawDigGrid() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::viewHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>activityError()</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, main.o(i._Z13activityErrorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = activityError() &rArr; System::viewScreen(bool) &rArr; Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Slider::drawDigGrid() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLight(unsigned short)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewScreen()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewHandler()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>activitySetup()</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, main.o(i._Z13activitySetupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = activitySetup() &rArr; Setup::handler() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::handler()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>activitySleep()</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, main.o(i._Z13activitySleepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = activitySleep() &rArr; Setup::viewScreen() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLight(unsigned short)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimers::viewScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>bkp_read_data(bkp_data_register_enum)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f30x_bkp.o(i._Z13bkp_read_data22bkp_data_register_enum))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::isTimeOk()
</UL>

<P><STRONG><a name="[df]"></a>can_error_get(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_can.o(i._Z13can_error_getj))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get(unsigned, can_interrupt_flag_enum)
</UL>

<P><STRONG><a name="[c0]"></a>handlerSensor()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i._Z13handlerSensorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = handlerSensor() &rArr; Sensor::handler() &rArr; Sensor::testProg() &rArr; Sensor::initialize() &rArr; i2c_clock_config(unsigned, unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setTimer(unsigned)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>timer_disable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z13timer_disablej))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayUs(unsigned)
</UL>

<P><STRONG><a name="[19a]"></a>usart_disable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z13usart_disablej))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::changeBaudrate(unsigned)
</UL>

<P><STRONG><a name="[c5]"></a>activitySearch()</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main.o(i._Z14activitySearchv))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = activitySearch() &rArr; System::viewScreen(bool) &rArr; Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Slider::drawDigGrid() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewHandler()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>adc_flag_clear(unsigned, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z14adc_flag_clearjj))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[178]"></a>bkp_write_data(bkp_data_register_enum, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f30x_bkp.o(i._Z14bkp_write_data22bkp_data_register_enumt))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
</UL>

<P><STRONG><a name="[98]"></a>fmc_page_erase(unsigned)</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, gd32f30x_fmc.o(i._Z14fmc_page_erasej))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_page_erase(unsigned) &rArr; fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait(unsigned)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewId()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
</UL>

<P><STRONG><a name="[134]"></a>gpio_bit_reset(unsigned, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i._Z14gpio_bit_resetjj))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initialize()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelDouble(short, short, unsigned, unsigned)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelCount(short, short, unsigned*, unsigned char)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::clearDot(unsigned short, unsigned short, char, char)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::powerUp()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::volatileWriteEnable()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeDisable()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeEnable()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[1c7]"></a>i2c_ack_config(unsigned, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z14i2c_ack_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[176]"></a>rtc_lwoff_wait()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i._Z14rtc_lwoff_waitv))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
</UL>

<P><STRONG><a name="[122]"></a>adc_mode_config(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z15adc_mode_configj))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[a5]"></a>can_filter_init(can_filter_parameter_struct*)</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, gd32f30x_can.o(i._Z15can_filter_initP27can_filter_parameter_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init(can_filter_parameter_struct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigFilter(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1c9]"></a>i2c_stop_on_bus(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z15i2c_stop_on_busj))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c9]"></a>nvic_irq_enable(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f30x_misc.o(i._Z15nvic_irq_enablehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initButton()
</UL>

<P><STRONG><a name="[166]"></a>rtc_counter_get()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i._Z15rtc_counter_getv))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeUpdate()
</UL>

<P><STRONG><a name="[cb]"></a>rtc_counter_set(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32f30x_rtc.o(i._Z15rtc_counter_setj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_counter_set(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
</UL>

<P><STRONG><a name="[99]"></a>fmc_word_program(unsigned, unsigned)</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gd32f30x_fmc.o(i._Z16fmc_word_programjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_word_program(unsigned, unsigned) &rArr; fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait(unsigned)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewKey()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewId()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
</UL>

<P><STRONG><a name="[ce]"></a>i2c_clock_config(unsigned, unsigned, unsigned)</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, gd32f30x_i2c.o(i._Z16i2c_clock_configjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = i2c_clock_config(unsigned, unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
</UL>

<P><STRONG><a name="[1ce]"></a>i2c_data_receive(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z16i2c_data_receivej))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cb]"></a>i2c_start_on_bus(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z16i2c_start_on_busj))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[158]"></a>spi_i2s_flag_get(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_spi.o(i._Z16spi_i2s_flag_getjj))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelDouble(short, short, unsigned, unsigned)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelCount(short, short, unsigned*, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::clearDot(unsigned short, unsigned short, char, char)
</UL>

<P><STRONG><a name="[1cf]"></a>i2c_ackpos_config(unsigned, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z17i2c_ackpos_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cd]"></a>i2c_data_transmit(unsigned, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z17i2c_data_transmitjh))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d0]"></a>rtc_prescaler_set(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32f30x_rtc.o(i._Z17rtc_prescaler_setj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_prescaler_set(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
</UL>

<P><STRONG><a name="[d1]"></a>activitySetupClock()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(i._Z18activitySetupClockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = activitySetupClock() &rArr; Setup::viewScreen() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>dma_channel_enable(unsigned, dma_channel_enum)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z18dma_channel_enablej16dma_channel_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_enable(unsigned, dma_channel_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[82]"></a>gpio_input_bit_get(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i._Z18gpio_input_bit_getjj))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::buttonCheck(unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>handlerTemperature()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._Z18handlerTemperaturev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handlerTemperature() &rArr; Temperature::request() &rArr; Temperature::steinhartHartEquation(float) &rArr; __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::request()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>rcu_clock_freq_get(rcu_clock_freq_enum)</STRONG> (Thumb, 310 bytes, Stack size 84 bytes, gd32f30x_rcu.o(i._Z18rcu_clock_freq_get19rcu_clock_freq_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config(unsigned, unsigned, unsigned)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set(unsigned, unsigned)
</UL>

<P><STRONG><a name="[d7]"></a>usart_baudrate_set(unsigned, unsigned)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f30x_usart.o(i._Z18usart_baudrate_setjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::changeBaudrate(unsigned)
</UL>

<P><STRONG><a name="[88]"></a>usart_data_receive(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z18usart_data_receivej))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>usart_stop_bit_set(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z18usart_stop_bit_setjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[d8]"></a>activityStartTimers()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i._Z19activityStartTimersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = activityStartTimers() &rArr; StartTimers::handler() &rArr; StartTimer::viewScreen(unsigned char) &rArr; Canvas::drawSlider(short, short, unsigned char, char) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimers::handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>adc_dma_mode_enable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z19adc_dma_mode_enablej))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[7d]"></a>can_message_receive(unsigned, unsigned char, can_receive_message_struct*)</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32f30x_can.o(i._Z19can_message_receivejhP26can_receive_message_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive(unsigned, unsigned char, can_receive_message_struct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>dma_priority_config(unsigned, dma_channel_enum, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gd32f30x_dma.o(i._Z19dma_priority_configj16dma_channel_enumj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_priority_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[dc]"></a>fmc_bank0_state_get()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i._Z19fmc_bank0_state_getv))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait(unsigned)
</UL>

<P><STRONG><a name="[dd]"></a>fmc_bank1_state_get()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i._Z19fmc_bank1_state_getv))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait(unsigned)
</UL>

<P><STRONG><a name="[1a5]"></a>usart_data_transmit(unsigned, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z19usart_data_transmitjj))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::startTransmission()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::transmitNextByte()
</UL>

<P><STRONG><a name="[19d]"></a>usart_parity_config(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z19usart_parity_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[136]"></a>can_interrupt_enable(unsigned, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_can.o(i._Z20can_interrupt_enablejj))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
</UL>

<P><STRONG><a name="[139]"></a>can_message_transmit(unsigned, can_trasnmit_message_struct*)</STRONG> (Thumb, 332 bytes, Stack size 12 bytes, gd32f30x_can.o(i._Z20can_message_transmitjP27can_trasnmit_message_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit(unsigned, can_trasnmit_message_struct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::handler()
</UL>

<P><STRONG><a name="[a4]"></a>can_struct_para_init(can_struct_type_enum, void*)</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gd32f30x_can.o(i._Z20can_struct_para_init20can_struct_type_enumPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_struct_para_init(can_struct_type_enum, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigFilter(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[c7]"></a>fmc_bank0_ready_wait(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i._Z20fmc_bank0_ready_waitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program(unsigned, unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase(unsigned)
</UL>

<P><STRONG><a name="[c8]"></a>fmc_bank1_ready_wait(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i._Z20fmc_bank1_ready_waitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program(unsigned, unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase(unsigned)
</UL>

<P><STRONG><a name="[1c5]"></a>i2c_mode_addr_config(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gd32f30x_i2c.o(i._Z20i2c_mode_addr_configjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_mode_addr_config(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
</UL>

<P><STRONG><a name="[11f]"></a>rcu_adc_clock_config(unsigned)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z20rcu_adc_clock_configj))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[8f]"></a>rcu_bkp_reset_enable()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z20rcu_bkp_reset_enablev))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit()
</UL>

<P><STRONG><a name="[17c]"></a>rcu_rtc_clock_config(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z20rcu_rtc_clock_configj))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
</UL>

<P><STRONG><a name="[1a0]"></a>usart_receive_config(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z20usart_receive_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[12b]"></a>adc_interrupt_disable(unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z21adc_interrupt_disablejj))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[121]"></a>adc_resolution_config(unsigned, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z21adc_resolution_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[1bf]"></a>gpio_pin_remap_config(unsigned, EventStatus)</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i._Z21gpio_pin_remap_configj11EventStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config(unsigned, EventStatus)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initSpi()
</UL>

<P><STRONG><a name="[1cc]"></a>i2c_master_addressing(unsigned, unsigned, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_i2c.o(i._Z21i2c_master_addressingjjj))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[146]"></a>nvic_vector_table_set(unsigned, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_misc.o(i._Z21nvic_vector_table_setjj))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::remapTable()
</UL>

<P><STRONG><a name="[eb]"></a>rcu_apb2_clock_config(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z21rcu_apb2_clock_configj))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[90]"></a>rcu_bkp_reset_disable()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z21rcu_bkp_reset_disablev))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit()
</UL>

<P><STRONG><a name="[1fb]"></a>spi_i2s_data_transmit(unsigned, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_spi.o(i._Z21spi_i2s_data_transmitjt))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
</UL>

<P><STRONG><a name="[19f]"></a>usart_transmit_config(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z21usart_transmit_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[19b]"></a>usart_word_length_set(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z21usart_word_length_setjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[12d]"></a>adc_calibration_enable(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z22adc_calibration_enablej))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[7c]"></a>can_interrupt_flag_get(unsigned, can_interrupt_flag_enum)</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, gd32f30x_can.o(i._Z22can_interrupt_flag_getj23can_interrupt_flag_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_interrupt_flag_get(unsigned, can_interrupt_flag_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get(unsigned, unsigned char)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_get(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>dma_circulation_enable(unsigned, dma_channel_enum)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z22dma_circulation_enablej16dma_channel_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_enable(unsigned, dma_channel_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[175]"></a>rtc_register_sync_wait()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i._Z22rtc_register_sync_waitv))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
</UL>

<P><STRONG><a name="[143]"></a>timer_prescaler_config(unsigned, unsigned short, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z22timer_prescaler_configjth))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::initialize()
</UL>

<P><STRONG><a name="[1a3]"></a>usart_interrupt_enable(unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i._Z22usart_interrupt_enablejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::startTransmission()
</UL>

<P><STRONG><a name="[e1]"></a>dma_memory_width_config(unsigned, dma_channel_enum, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gd32f30x_dma.o(i._Z23dma_memory_width_configj16dma_channel_enumj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_memory_width_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[e2]"></a>dma_periph_width_config(unsigned, dma_channel_enum, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gd32f30x_dma.o(i._Z23dma_periph_width_configj16dma_channel_enumj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_periph_width_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[80]"></a>exti_interrupt_flag_get(exti_line_enum)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f30x_exti.o(i._Z23exti_interrupt_flag_get14exti_line_enum))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>gpio_exti_source_select(unsigned char, unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f30x_gpio.o(i._Z23gpio_exti_source_selecthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initButton()
</UL>

<P><STRONG><a name="[ca]"></a>nvic_priority_group_set(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i._Z23nvic_priority_group_setj))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[174]"></a>pmu_backup_write_enable()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_pmu.o(i._Z23pmu_backup_write_enablev))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
</UL>

<P><STRONG><a name="[11d]"></a>rcu_periph_clock_enable(rcu_periph_enum)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z23rcu_periph_clock_enable15rcu_periph_enum))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::initialize()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initButton()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initSpi()
</UL>

<P><STRONG><a name="[8c]"></a>rcu_periph_reset_enable(rcu_periph_reset_enum)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z23rcu_periph_reset_enable21rcu_periph_reset_enum))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit(unsigned)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit(unsigned)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit(unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit(unsigned)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit(unsigned)
</UL>

<P><STRONG><a name="[19e]"></a>usart_data_first_config(unsigned, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z23usart_data_first_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[1a6]"></a>usart_interrupt_disable(unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i._Z23usart_interrupt_disablejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::transmitNextByte()
</UL>

<P><STRONG><a name="[7f]"></a>can_interrupt_flag_clear(unsigned, can_interrupt_flag_enum)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_can.o(i._Z24can_interrupt_flag_clearj23can_interrupt_flag_enum))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>rcu_periph_reset_disable(rcu_periph_reset_enum)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i._Z24rcu_periph_reset_disable21rcu_periph_reset_enum))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit(unsigned)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit(unsigned)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit(unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit(unsigned)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit(unsigned)
</UL>

<P><STRONG><a name="[1a2]"></a>usart_dma_receive_config(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z24usart_dma_receive_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[86]"></a>usart_interrupt_flag_get(unsigned, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f30x_usart.o(i._Z24usart_interrupt_flag_getjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>adc_channel_length_config(unsigned, unsigned char, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gd32f30x_adc.o(i._Z25adc_channel_length_configjhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config(unsigned, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[124]"></a>adc_data_alignment_config(unsigned, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z25adc_data_alignment_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[e3]"></a>dma_memory_address_config(unsigned, dma_channel_enum, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z25dma_memory_address_configj16dma_channel_enumj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_address_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[e4]"></a>dma_periph_address_config(unsigned, dma_channel_enum, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z25dma_periph_address_configj16dma_channel_enumj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_periph_address_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[81]"></a>exti_interrupt_flag_clear(exti_line_enum)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i._Z25exti_interrupt_flag_clear14exti_line_enum))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initButton()
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>usart_dma_transmit_config(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i._Z25usart_dma_transmit_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
</UL>

<P><STRONG><a name="[126]"></a>adc_regular_channel_config(unsigned, unsigned char, unsigned char, unsigned)</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f30x_adc.o(i._Z26adc_regular_channel_configjhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_regular_channel_config(unsigned, unsigned char, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[e5]"></a>dma_memory_increase_enable(unsigned, dma_channel_enum)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z26dma_memory_increase_enablej16dma_channel_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_increase_enable(unsigned, dma_channel_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[e6]"></a>dma_transfer_number_config(unsigned, dma_channel_enum, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z26dma_transfer_number_configj16dma_channel_enumj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_number_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[14a]"></a>timer_counter_value_config(unsigned, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z26timer_counter_value_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayUs(unsigned)
</UL>

<P><STRONG><a name="[87]"></a>usart_interrupt_flag_clear(unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i._Z26usart_interrupt_flag_clearjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>adc_external_trigger_config(unsigned, unsigned char, EventStatus)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z27adc_external_trigger_configjh11EventStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[123]"></a>adc_special_function_config(unsigned, unsigned, EventStatus)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z27adc_special_function_configjj11EventStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[e7]"></a>dma_periph_increase_disable(unsigned, dma_channel_enum)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z27dma_periph_increase_disablej16dma_channel_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_periph_increase_disable(unsigned, dma_channel_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[cd]"></a>rtc_configuration_mode_exit()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i._Z27rtc_configuration_mode_exitv))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set(unsigned)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set(unsigned)
</UL>

<P><STRONG><a name="[1f5]"></a>timer_channel_output_config(unsigned, unsigned short, timer_oc_parameter_struct*)</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, gd32f30x_timer.o(i._Z27timer_channel_output_configjtP25timer_oc_parameter_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config(unsigned, unsigned short, timer_oc_parameter_struct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[1f3]"></a>timer_primary_output_config(unsigned, EventStatus)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z27timer_primary_output_configj11EventStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[cc]"></a>rtc_configuration_mode_enter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i._Z28rtc_configuration_mode_enterv))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set(unsigned)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set(unsigned)
</UL>

<P><STRONG><a name="[12a]"></a>adc_tempsensor_vrefint_enable()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z29adc_tempsensor_vrefint_enablev))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[e8]"></a>dma_transfer_direction_config(unsigned, dma_channel_enum, unsigned)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gd32f30x_dma.o(i._Z29dma_transfer_direction_configj16dma_channel_enumj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_direction_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check(unsigned, dma_channel_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[144]"></a>timer_autoreload_value_config(unsigned, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z29timer_autoreload_value_configjj))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::initialize()
</UL>

<P><STRONG><a name="[de]"></a>can_receive_message_length_get(unsigned, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f30x_can.o(i._Z30can_receive_message_length_getjh))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get(unsigned, can_interrupt_flag_enum)
</UL>

<P><STRONG><a name="[1fa]"></a>timer_master_slave_mode_config(unsigned, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z30timer_master_slave_mode_configjh))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[14b]"></a>timer_single_pulse_mode_config(unsigned, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z30timer_single_pulse_mode_configjh))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayUs(unsigned)
</UL>

<P><STRONG><a name="[1f2]"></a>timer_auto_reload_shadow_disable(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z32timer_auto_reload_shadow_disablej))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[1f8]"></a>timer_channel_output_fast_config(unsigned, unsigned short, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z32timer_channel_output_fast_configjtt))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[1f7]"></a>timer_channel_output_mode_config(unsigned, unsigned short, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z32timer_channel_output_mode_configjtt))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[127]"></a>adc_external_trigger_source_config(unsigned, unsigned char, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_adc.o(i._Z34adc_external_trigger_source_configjhj))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
</UL>

<P><STRONG><a name="[1f4]"></a>timer_channel_output_shadow_config(unsigned, unsigned short, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z34timer_channel_output_shadow_configjtt))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[1f6]"></a>timer_channel_output_pulse_value_config(unsigned, unsigned short, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z39timer_channel_output_pulse_value_configjtj))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLight(unsigned short)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[1f9]"></a>timer_master_output_trigger_source_select(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_timer.o(i._Z41timer_master_output_trigger_source_selectjj))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[e9]"></a>initAll()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i._Z7initAllv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = initAll() &rArr; Display::initialize() &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initialize()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::initialize()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::initialize()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::remapTable()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::initialize()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb2_clock_config(unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>can_init(unsigned, can_parameter_struct*)</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gd32f30x_can.o(i._Z8can_initjP20can_parameter_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init(unsigned, can_parameter_struct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
</UL>

<P><STRONG><a name="[9a]"></a>fmc_lock()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i._Z8fmc_lockv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewKey()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewId()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
</UL>

<P><STRONG><a name="[f6]"></a>setNewId()</STRONG> (Thumb, 256 bytes, Stack size 376 bytes, main.o(i._Z8setNewIdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = setNewId() &rArr; fmc_word_program(unsigned, unsigned) &rArr; fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program(unsigned, unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase(unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_get(unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ef]"></a>spi_init(unsigned, spi_parameter_struct*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f30x_spi.o(i._Z8spi_initjP20spi_parameter_struct))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>

<P><STRONG><a name="[1c4]"></a>exti_init(exti_line_enum, exti_mode_enum, exti_trig_type_enum)</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gd32f30x_exti.o(i._Z9exti_init14exti_line_enum14exti_mode_enum19exti_trig_type_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init(exti_line_enum, exti_mode_enum, exti_trig_type_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initButton()
</UL>

<P><STRONG><a name="[11e]"></a>gpio_init(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i._Z9gpio_initjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::initialize()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::initialize()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initButton()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initSpi()
</UL>

<P><STRONG><a name="[f7]"></a>readSetup()</STRONG> (Thumb, 802 bytes, Stack size 80 bytes, main.o(i._Z9readSetupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = readSetup() &rArr; writeSetup() &rArr; fmc_word_program(unsigned, unsigned) &rArr; fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::celToFar(float)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>setNewKey()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i._Z9setNewKeyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = setNewKey() &rArr; fmc_word_program(unsigned, unsigned) &rArr; fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program(unsigned, unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_get(unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>SetupClock::viewMinute(bool)</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, setup_clock.o(i._ZN10SetupClock10viewMinuteEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SetupClock::viewMinute(bool) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
</UL>

<P><STRONG><a name="[bc]"></a>SetupClock::viewScreen()</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, setup_clock.o(i._ZN10SetupClock10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SetupClock::viewScreen() &rArr; SetupClock::viewWeek(bool) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringCenter(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewWeek(bool)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewHour(bool)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewCorrection(bool)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::setPosition(bool)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewMinute(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetup()
</UL>

<P><STRONG><a name="[fe]"></a>SetupClock::setPosition(bool)</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, setup_clock.o(i._ZN10SetupClock11setPositionEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetupClock::setPosition(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
</UL>

<P><STRONG><a name="[104]"></a>SetupClock::viewCorrection(bool)</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, setup_clock.o(i._ZN10SetupClock14viewCorrectionEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = SetupClock::viewCorrection(bool) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringCenter(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
</UL>

<P><STRONG><a name="[d2]"></a>SetupClock::handler()</STRONG> (Thumb, 1468 bytes, Stack size 16 bytes, setup_clock.o(i._ZN10SetupClock7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SetupClock::handler() &rArr; writeSetup() &rArr; fmc_word_program(unsigned, unsigned) &rArr; fmc_bank1_ready_wait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTimer()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSetup()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewWeek(bool)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewHour(bool)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewCorrection(bool)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewMinute(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetupClock()
</UL>

<P><STRONG><a name="[103]"></a>SetupClock::viewHour(bool)</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, setup_clock.o(i._ZN10SetupClock8viewHourEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SetupClock::viewHour(bool) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
</UL>

<P><STRONG><a name="[102]"></a>SetupClock::viewWeek(bool)</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, setup_clock.o(i._ZN10SetupClock8viewWeekEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = SetupClock::viewWeek(bool) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
</UL>

<P><STRONG><a name="[211]"></a>SetupClock::SetupClock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setup_clock.o(i._ZN10SetupClockC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_setup_clock_cpp_ccf099aa
</UL>

<P><STRONG><a name="[261]"></a>SetupClock::SetupClock__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, setup_clock.o(i._ZN10SetupClockC1Ev), UNUSED)

<P><STRONG><a name="[108]"></a>StartTimer::viewButton()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, start_timer.o(i._ZN10StartTimer10viewButtonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = StartTimer::viewButton() &rArr; Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
</UL>

<P><STRONG><a name="[109]"></a>StartTimer::viewScreen(unsigned char)</STRONG> (Thumb, 3694 bytes, Stack size 208 bytes, start_timer.o(i._ZN10StartTimer10viewScreenEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = StartTimer::viewScreen(unsigned char) &rArr; Canvas::drawSlider(short, short, unsigned char, char) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTimer()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSlider(short, short, unsigned char, char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreenChange()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::turnOff()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimers::handler()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimers::viewScreen()
</UL>

<P><STRONG><a name="[10a]"></a>StartTimer::viewScreenChange()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, start_timer.o(i._ZN10StartTimer16viewScreenChangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = StartTimer::viewScreenChange() &rArr; Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
</UL>

<P><STRONG><a name="[212]"></a>StartTimer::StartTimer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, start_timer.o(i._ZN10StartTimerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_start_timer_cpp_c98decc7
</UL>

<P><STRONG><a name="[262]"></a>StartTimer::StartTimer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_timer.o(i._ZN10StartTimerC1Ev), UNUSED)

<P><STRONG><a name="[10f]"></a>CAN_PGN_RVC::msgFurnace()</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC10msgFurnaceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_PGN_RVC::msgFurnace() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[110]"></a>CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC11generateAIDEhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgTimers()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgCirculationPumpStatus()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostatSchedule1(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgDiagnosticMessage()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater2()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat2()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat1()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgAmbientTemp()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgHeaterInfo()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgExtMessage()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgFurnace()
</UL>

<P><STRONG><a name="[112]"></a>CAN_PGN_RVC::msgExtMessage()</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC13msgExtMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CAN_PGN_RVC::msgExtMessage() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[113]"></a>CAN_PGN_RVC::msgHeaterInfo()</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC13msgHeaterInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_PGN_RVC::msgHeaterInfo() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[114]"></a>CAN_PGN_RVC::msgAmbientTemp()</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC14msgAmbientTempEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CAN_PGN_RVC::msgAmbientTemp() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[115]"></a>CAN_PGN_RVC::msgThermostat1()</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC14msgThermostat1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CAN_PGN_RVC::msgThermostat1() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[116]"></a>CAN_PGN_RVC::msgThermostat2()</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC14msgThermostat2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_PGN_RVC::msgThermostat2() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[117]"></a>CAN_PGN_RVC::msgWaterHeater()</STRONG> (Thumb, 190 bytes, Stack size 88 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC14msgWaterHeaterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CAN_PGN_RVC::msgWaterHeater() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[118]"></a>CAN_PGN_RVC::msgWaterHeater2()</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC15msgWaterHeater2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_PGN_RVC::msgWaterHeater2() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[119]"></a>CAN_PGN_RVC::msgDiagnosticMessage()</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC20msgDiagnosticMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CAN_PGN_RVC::msgDiagnosticMessage() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[11a]"></a>CAN_PGN_RVC::msgThermostatSchedule1(unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC22msgThermostatSchedule1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CAN_PGN_RVC::msgThermostatSchedule1(unsigned char) &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[11b]"></a>CAN_PGN_RVC::msgCirculationPumpStatus()</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC24msgCirculationPumpStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_PGN_RVC::msgCirculationPumpStatus() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[11c]"></a>CAN_PGN_RVC::msgTimers()</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVC9msgTimersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_PGN_RVC::msgTimers() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::generateAID(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
</UL>

<P><STRONG><a name="[20f]"></a>CAN_PGN_RVC::CAN_PGN_RVC()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVCC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_pgn_rvc_cpp_b5b58dd4
</UL>

<P><STRONG><a name="[263]"></a>CAN_PGN_RVC::CAN_PGN_RVC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pgn_rvc.o(i._ZN11CAN_PGN_RVCC1Ev), UNUSED)

<P><STRONG><a name="[bf]"></a>StartTimers::viewScreen()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, start_timers.o(i._ZN11StartTimers10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = StartTimers::viewScreen() &rArr; StartTimer::viewScreen(unsigned char) &rArr; Canvas::drawSlider(short, short, unsigned char, char) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
</UL>

<P><STRONG><a name="[d9]"></a>StartTimers::handler()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, start_timers.o(i._ZN11StartTimers7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = StartTimers::handler() &rArr; StartTimer::viewScreen(unsigned char) &rArr; Canvas::drawSlider(short, short, unsigned char, char) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityStartTimers()
</UL>

<P><STRONG><a name="[214]"></a>StartTimers::StartTimers()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, start_timers.o(i._ZN11StartTimersC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_start_timers_cpp_1ec715f4
</UL>

<P><STRONG><a name="[264]"></a>StartTimers::StartTimers__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_timers.o(i._ZN11StartTimersC1Ev), UNUSED)

<P><STRONG><a name="[f1]"></a>Temperature::initialize()</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Temperature::initialize() &rArr; dma_periph_width_config(unsigned, dma_channel_enum, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config(unsigned, unsigned char, unsigned)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_direction_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempsensor_vrefint_enable()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_increase_disable(unsigned, dma_channel_enum)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config(unsigned, unsigned, EventStatus)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config(unsigned, unsigned char, EventStatus)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_increase_enable(unsigned, dma_channel_enum)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config(unsigned, unsigned char, unsigned char, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_address_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config(unsigned, unsigned)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config(unsigned, unsigned char, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_width_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_width_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable(unsigned, dma_channel_enum)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable(unsigned)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_resolution_config(unsigned, unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_disable(unsigned, unsigned)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config(unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_priority_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable(unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable(unsigned, dma_channel_enum)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config(unsigned)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear(unsigned, unsigned)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable(unsigned)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit(unsigned, dma_channel_enum)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable(unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[12f]"></a>Temperature::steinhartHartEquation(float)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature21steinhartHartEquationEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Temperature::steinhartHartEquation(float) &rArr; __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::request()
</UL>

<P><STRONG><a name="[d6]"></a>Temperature::request()</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, temperature.o(i._ZN11Temperature7requestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Temperature::request() &rArr; Temperature::steinhartHartEquation(float) &rArr; __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::celToFar(float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::steinhartHartEquation(float)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerTemperature()
</UL>

<P><STRONG><a name="[213]"></a>Temperature::Temperature()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, temperature.o(i._ZN11TemperatureC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_temperature_cpp_be4e2a6c
</UL>

<P><STRONG><a name="[265]"></a>Temperature::Temperature__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, temperature.o(i._ZN11TemperatureC1Ev), UNUSED)

<P><STRONG><a name="[ef]"></a>Can::initialize()</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, can.o(i._ZN3Can10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Can::initialize() &rArr; ConfigFilter(unsigned, unsigned char) &rArr; can_struct_para_init(can_struct_type_enum, void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init(unsigned, can_parameter_struct*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init(can_struct_type_enum, void*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable(unsigned, unsigned)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable(unsigned char, unsigned char, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit(unsigned)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigFilter(unsigned, unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::handler()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[7e]"></a>Can::SaveMessage()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can.o(i._ZN3Can11SaveMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Can::SaveMessage() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 244 bytes, Stack size 36 bytes, can.o(i._ZN3Can11SendMessageEjhhhhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgTimers()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgCirculationPumpStatus()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostatSchedule1(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgDiagnosticMessage()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater2()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat2()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat1()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgAmbientTemp()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgHeaterInfo()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgExtMessage()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgFurnace()
</UL>

<P><STRONG><a name="[137]"></a>Can::handler()</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, can.o(i._ZN3Can7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Can::handler() &rArr; Can::initialize() &rArr; ConfigFilter(unsigned, unsigned char) &rArr; can_struct_para_init(can_struct_type_enum, void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit(unsigned, can_trasnmit_message_struct*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[215]"></a>Can::Can()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can.o(i._ZN3CanC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Can::Can()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_can_cpp_can
</UL>

<P><STRONG><a name="[266]"></a>Can::Can__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, can.o(i._ZN3CanC1Ev), UNUSED)

<P><STRONG><a name="[ad]"></a>Hcu::handler()</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, hcu.o(i._ZN3Hcu7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcu::handler() &rArr; Hcu::parsing() &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::farToCel(float)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::processReceivedData()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::startTransmission()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::processTimeOut()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerUsart()
</UL>

<P><STRONG><a name="[13e]"></a>Hcu::parsing()</STRONG> (Thumb, 1488 bytes, Stack size 48 bytes, hcu.o(i._ZN3Hcu7parsingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hcu::parsing() &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::celToFar(float)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::handler()
</UL>

<P><STRONG><a name="[216]"></a>Hcu::Hcu()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hcu.o(i._ZN3HcuC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_hcu_cpp_hcu
</UL>

<P><STRONG><a name="[267]"></a>Hcu::Hcu__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hcu.o(i._ZN3HcuC1Ev), UNUSED)

<P><STRONG><a name="[ed]"></a>Core::initialize()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, core.o(i._ZN4Core10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Core::initialize() &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_autoreload_value_config(unsigned, unsigned)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_prescaler_config(unsigned, unsigned short, unsigned char)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable(unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[ec]"></a>Core::remapTable()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, core.o(i._ZN4Core10remapTableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Core::remapTable()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[147]"></a>Core::delayMs(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, core.o(i._ZN4Core7delayMsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Core::delayMs(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::buttonCheck(unsigned char)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initialize()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
</UL>

<P><STRONG><a name="[148]"></a>Core::delayUs(unsigned)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, core.o(i._ZN4Core7delayUsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Core::delayUs(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_single_pulse_mode_config(unsigned, unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config(unsigned, unsigned)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable(unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
</UL>

<P><STRONG><a name="[83]"></a>Core::getTick()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core.o(i._ZN4Core7getTickEv))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayMs(unsigned)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewTemperature(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration(bool, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setTimer(unsigned)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::checkDayNight()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::handler()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::handler()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::handler()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::handler()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerTemperature()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerTimer()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen100(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen14(unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen12(unsigned char)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen10(unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::getTimer()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgTimers()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::setTimer(unsigned)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::getTimer()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::resetTimer()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>Core::incTick()</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, core.o(i._ZN4Core7incTickEv))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f8]"></a>Core::celToFar(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, core.o(i._ZN4Core8celToFarEf))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::request()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSetup()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen15(unsigned char)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
</UL>

<P><STRONG><a name="[13b]"></a>Core::farToCel(float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, core.o(i._ZN4Core8farToCelEf))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewTemperature(bool)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::handler()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen15(unsigned char)
</UL>

<P><STRONG><a name="[105]"></a>Core::getTimer()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, core.o(i._ZN4Core8getTimerEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::buttonPress()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
</UL>

<P><STRONG><a name="[106]"></a>Core::setTimer(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(i._ZN4Core8setTimerEj))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::sensorCheck()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::sensorCheck()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::handler()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::sensorCheck()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
</UL>

<P><STRONG><a name="[218]"></a>Core::Core()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core.o(i._ZN4CoreC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_core_cpp_core
</UL>

<P><STRONG><a name="[268]"></a>Core::Core__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, core.o(i._ZN4CoreC1Ev), UNUSED)

<P><STRONG><a name="[14c]"></a>Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, text.o(i._ZN4Text10writeDigitEttPKcjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewCenterDigClock(char)
</UL>

<P><STRONG><a name="[fd]"></a>Text::decToString(char*, int)</STRONG> (Thumb, 674 bytes, Stack size 68 bytes, text.o(i._ZN4Text11decToStringEPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Text::decToString(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDigGrid()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewTemperature(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewError(unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewMode()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::eraseDigGrid()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewString()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewHour(bool)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewCorrection(bool)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewMinute(bool)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::floatToString(char*, float, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen100(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen14(unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen12(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
</UL>

<P><STRONG><a name="[fc]"></a>Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, text.o(i._ZN4Text11writeStringEttPKc7FontDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewMode()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewScreen()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewScreen()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewWeek(bool)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewHour(bool)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewCorrection(bool)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewMinute(bool)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, bool)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, char*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDouble(unsigned short, unsigned short, unsigned char, unsigned char, const char*, bool, bool*, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen100(unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen15(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen14(unsigned char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen12(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen10(unsigned char)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen1(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
</UL>

<P><STRONG><a name="[180]"></a>Text::charToString(char*, const char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, text.o(i._ZN4Text12charToStringEPcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Text::charToString(char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewMode()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewScreen()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen100(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen14(unsigned char)
</UL>

<P><STRONG><a name="[156]"></a>Text::getLenString(const char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, text.o(i._ZN4Text12getLenStringEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringCenter(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
</UL>

<P><STRONG><a name="[14f]"></a>Text::floatToString(char*, float, unsigned char)</STRONG> (Thumb, 336 bytes, Stack size 28 bytes, text.o(i._ZN4Text13floatToStringEPcfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Text::floatToString(char*, float, unsigned char) &rArr; Text::decToString(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen100(unsigned char)
</UL>

<P><STRONG><a name="[150]"></a>Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, text.o(i._ZN4Text13writeCharOverEttc7FontDefjjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColor(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[14d]"></a>Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char)</STRONG> (Thumb, 1996 bytes, Stack size 48 bytes, text.o(i._ZN4Text13writeOneDigitEttcjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewTemperature(bool)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[17b]"></a>Text::decToStringFix(char*, int, unsigned char)</STRONG> (Thumb, 748 bytes, Stack size 72 bytes, text.o(i._ZN4Text14decToStringFixEPcih))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Text::decToStringFix(char*, int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewCenterDigClock(char)
</UL>

<P><STRONG><a name="[155]"></a>Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, text.o(i._ZN4Text15writeStringOverEssPc7FontDefjjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDigGrid()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewScreen()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewMessage(char*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewError(unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::eraseDigGrid()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewString()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewCenterDigClock(char)
</UL>

<P><STRONG><a name="[101]"></a>Text::writeStringCenter(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, text.o(i._ZN4Text17writeStringCenterEttPKc7FontDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Text::writeStringCenter(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::getLenString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewCorrection(bool)
</UL>

<P><STRONG><a name="[14e]"></a>Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, text.o(i._ZN4Text9writeCharEttc7FontDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringCenter(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
</UL>

<P><STRONG><a name="[219]"></a>Text::Text()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, text.o(i._ZN4TextC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_text_cpp_text
</UL>

<P><STRONG><a name="[269]"></a>Text::Text__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, text.o(i._ZN4TextC1Ev), UNUSED)

<P><STRONG><a name="[a1]"></a>About::viewScreen()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, about.o(i._ZN5About10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = About::viewScreen() &rArr; Canvas::loadImage(unsigned short, unsigned short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::turnOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
</UL>

<P><STRONG><a name="[15b]"></a>About::sensorCheck()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, about.o(i._ZN5About11sensorCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = About::sensorCheck()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::viewHandler()
</UL>

<P><STRONG><a name="[b1]"></a>About::viewHandler()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, about.o(i._ZN5About11viewHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = About::viewHandler() &rArr; About::sensorCheck()
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::sensorCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAbout()
</UL>

<P><STRONG><a name="[21a]"></a>About::About()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, about.o(i._ZN5AboutC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_about_cpp_about
</UL>

<P><STRONG><a name="[26a]"></a>About::About__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, about.o(i._ZN5AboutC1Ev), UNUSED)

<P><STRONG><a name="[15c]"></a>Clock::drawMinute(unsigned short, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock10drawMinuteEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Clock::drawMinute(unsigned short, unsigned char) &rArr; Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::setColorGridClock(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockSecond()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockMinute()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockHour(char*, signed char*, unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
</UL>

<P><STRONG><a name="[15f]"></a>Clock::drawSecond(unsigned short, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock10drawSecondEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Clock::drawSecond(unsigned short, unsigned char) &rArr; Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockSecond()
</UL>

<P><STRONG><a name="[ea]"></a>Clock::initialize()</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Clock::initialize() &rArr; std::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::isTimeOk()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::config()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[165]"></a>Clock::resetTimer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, clock.o(i._ZN5Clock10resetTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clock::resetTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[164]"></a>Clock::timeUpdate()</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, clock.o(i._ZN5Clock10timeUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Clock::timeUpdate() &rArr; UnixTime::timerToCal(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnixTime::timerToCal(unsigned long)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::handler()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::initialize()
</UL>

<P><STRONG><a name="[168]"></a>Clock::sensorCheck()</STRONG> (Thumb, 988 bytes, Stack size 40 bytes, clock.o(i._ZN5Clock11sensorCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Clock::sensorCheck() &rArr; Clock::drawHour(unsigned short, char) &rArr; Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::clearDrawMinute(unsigned short, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawMinute(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>Clock::viewAnClock(unsigned char)</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock11viewAnClockEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = Clock::viewAnClock(unsigned char) &rArr; Clock::viewCenterDigClock(char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::turnOff()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewCenterDigClock(char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockSecond()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockMinute()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockHour(char*, signed char*, unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::setTimer(unsigned)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::getTimer()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::resetTimer()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawMinute(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::viewScreen()
</UL>

<P><STRONG><a name="[d3]"></a>Clock::timeRegulate()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, clock.o(i._ZN5Clock12timeRegulateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Clock::timeRegulate() &rArr; UnixTime::calToTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnixTime::calToTimer()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set(unsigned)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_write_data(bkp_data_register_enum, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetupClock()
</UL>

<P><STRONG><a name="[169]"></a>Clock::clearDrawMinute(unsigned short, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock15clearDrawMinuteEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Clock::clearDrawMinute(unsigned short, unsigned char) &rArr; Canvas::clearDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::clearDot(unsigned short, unsigned short, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockMinute()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
</UL>

<P><STRONG><a name="[17a]"></a>Clock::clearDrawSecond(unsigned short, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock15clearDrawSecondEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Clock::clearDrawSecond(unsigned short, unsigned char) &rArr; Canvas::clearDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::clearDot(unsigned short, unsigned short, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockSecond()
</UL>

<P><STRONG><a name="[172]"></a>Clock::viewAnClockHour(char*, signed char*, unsigned char)</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, clock.o(i._ZN5Clock15viewAnClockHourEPcPah))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Clock::viewAnClockHour(char*, signed char*, unsigned char) &rArr; Clock::drawHour(unsigned short, char) &rArr; Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawMinute(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>Clock::setColorGridClock(char)</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, clock.o(i._ZN5Clock17setColorGridClockEc))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawMinute(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[170]"></a>Clock::viewAnClockMinute()</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock17viewAnClockMinuteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Clock::viewAnClockMinute() &rArr; Clock::drawHour(unsigned short, char) &rArr; Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::clearDrawMinute(unsigned short, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawMinute(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[16f]"></a>Clock::viewAnClockSecond()</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, clock.o(i._ZN5Clock17viewAnClockSecondEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Clock::viewAnClockSecond() &rArr; Clock::drawHour(unsigned short, char) &rArr; Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::clearDrawSecond(unsigned short, unsigned char)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawSecond(unsigned short, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawMinute(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[16e]"></a>Clock::viewCenterDigClock(char)</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, clock.o(i._ZN5Clock18viewCenterDigClockEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Clock::viewCenterDigClock(char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToStringFix(char*, int, unsigned char)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[163]"></a>Clock::config()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, clock.o(i._ZN5Clock6configEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock::config() &rArr; bkp_deinit()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config(unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set(unsigned)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::initialize()
</UL>

<P><STRONG><a name="[a7]"></a>Clock::handler()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clock.o(i._ZN5Clock7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Clock::handler() &rArr; Clock::timeUpdate() &rArr; UnixTime::timerToCal(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerClock()
</UL>

<P><STRONG><a name="[16a]"></a>Clock::drawHour(unsigned short, char)</STRONG> (Thumb, 320 bytes, Stack size 128 bytes, clock.o(i._ZN5Clock8drawHourEtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = Clock::drawHour(unsigned short, char) &rArr; Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::setColorGridClock(char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockSecond()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockMinute()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockHour(char*, signed char*, unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
</UL>

<P><STRONG><a name="[173]"></a>Clock::getTimer()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, clock.o(i._ZN5Clock8getTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock::getTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[162]"></a>Clock::isTimeOk()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock.o(i._ZN5Clock8isTimeOkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock::isTimeOk()
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_read_data(bkp_data_register_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::initialize()
</UL>

<P><STRONG><a name="[171]"></a>Clock::setTimer(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, clock.o(i._ZN5Clock8setTimerEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock::setTimer(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[17e]"></a>Clock::Clock()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, clock.o(i._ZN5ClockC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock::Clock() &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_clock_cpp_clock
</UL>

<P><STRONG><a name="[26b]"></a>Clock::Clock__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clock.o(i._ZN5ClockC1Ev), UNUSED)

<P><STRONG><a name="[b7]"></a>Error::viewScreen()</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, error.o(i._ZN5Error10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Error::viewScreen() &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::charToString(char*, const char*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
</UL>

<P><STRONG><a name="[181]"></a>Error::buttonPress()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, error.o(i._ZN5Error11buttonPressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Error::buttonPress()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::sensorCheck()
</UL>

<P><STRONG><a name="[182]"></a>Error::sensorCheck()</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, error.o(i._ZN5Error11sensorCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Error::sensorCheck() &rArr; Error::buttonPress()
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::buttonPress()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewHandler()
</UL>

<P><STRONG><a name="[b8]"></a>Error::viewHandler()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, error.o(i._ZN5Error11viewHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = Error::viewHandler() &rArr; Error::viewMode() &rArr; Error::viewError(unsigned char) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewMode()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::sensorCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
</UL>

<P><STRONG><a name="[183]"></a>Error::viewMode()</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, error.o(i._ZN5Error8viewModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Error::viewMode() &rArr; Error::viewError(unsigned char) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::charToString(char*, const char*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewError(unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewHandler()
</UL>

<P><STRONG><a name="[184]"></a>Error::viewError(unsigned char)</STRONG> (Thumb, 542 bytes, Stack size 80 bytes, error.o(i._ZN5Error9viewErrorEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Error::viewError(unsigned char) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewMode()
</UL>

<P><STRONG><a name="[21b]"></a>Error::Error()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, error.o(i._ZN5ErrorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_error_cpp_error
</UL>

<P><STRONG><a name="[26c]"></a>Error::Error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, error.o(i._ZN5ErrorC1Ev), UNUSED)

<P><STRONG><a name="[a2]"></a>Setup::viewScreen()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, setup.o(i._ZN5Setup10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = Setup::viewScreen() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::turnOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetupClock()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
</UL>

<P><STRONG><a name="[186]"></a>Setup::viewScreen1(unsigned char)</STRONG> (Thumb, 1262 bytes, Stack size 88 bytes, setup.o(i._ZN5Setup11viewScreen1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Setup::viewScreen1(unsigned char) &rArr; Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char) &rArr; Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLight(unsigned short)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, char*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[189]"></a>Setup::viewScreen10(unsigned char)</STRONG> (Thumb, 718 bytes, Stack size 104 bytes, setup.o(i._ZN5Setup12viewScreen10Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = Setup::viewScreen10(unsigned char) &rArr; Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char) &rArr; Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, char*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18a]"></a>Setup::viewScreen11(unsigned char)</STRONG> (Thumb, 2988 bytes, Stack size 176 bytes, setup.o(i._ZN5Setup12viewScreen11Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, bool)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, char*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDouble(unsigned short, unsigned short, unsigned char, unsigned char, const char*, bool, bool*, unsigned char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToStringFix(char*, int, unsigned char)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[190]"></a>Setup::viewScreen12(unsigned char)</STRONG> (Thumb, 1204 bytes, Stack size 64 bytes, setup.o(i._ZN5Setup12viewScreen12Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Setup::viewScreen12(unsigned char) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[191]"></a>Setup::viewScreen13(unsigned char)</STRONG> (Thumb, 1484 bytes, Stack size 88 bytes, setup.o(i._ZN5Setup12viewScreen13Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Setup::viewScreen13(unsigned char) &rArr; Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char) &rArr; Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[193]"></a>Setup::viewScreen14(unsigned char)</STRONG> (Thumb, 666 bytes, Stack size 88 bytes, setup.o(i._ZN5Setup12viewScreen14Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Setup::viewScreen14(unsigned char) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::charToString(char*, const char*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[194]"></a>Setup::viewScreen15(unsigned char)</STRONG> (Thumb, 1028 bytes, Stack size 104 bytes, setup.o(i._ZN5Setup12viewScreen15Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Setup::viewScreen15(unsigned char) &rArr; Checkbox::draw(unsigned short, unsigned short, const char*, char*) &rArr; Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::farToCel(float)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::changeScale(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::celToFar(float)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[196]"></a>Setup::viewScreen100(unsigned char)</STRONG> (Thumb, 514 bytes, Stack size 72 bytes, setup.o(i._ZN5Setup13viewScreen100Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = Setup::viewScreen100(unsigned char) &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::charToString(char*, const char*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::floatToString(char*, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[197]"></a>Setup::viewScreenChange()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, setup.o(i._ZN5Setup16viewScreenChangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Setup::viewScreenChange() &rArr; Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::handler()
</UL>

<P><STRONG><a name="[bb]"></a>Setup::handler()</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, setup.o(i._ZN5Setup7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = Setup::handler() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewPage(unsigned char, unsigned char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreenChange()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetup()
</UL>

<P><STRONG><a name="[185]"></a>Setup::viewPage(unsigned char, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, setup.o(i._ZN5Setup8viewPageEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen100(unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen15(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen14(unsigned char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen12(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen10(unsigned char)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen1(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::handler()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
</UL>

<P><STRONG><a name="[21c]"></a>Setup::Setup()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, setup.o(i._ZN5SetupC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_setup_cpp_setup
</UL>

<P><STRONG><a name="[26d]"></a>Setup::Setup__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, setup.o(i._ZN5SetupC1Ev), UNUSED)

<P><STRONG><a name="[aa]"></a>Sleep::viewScreen()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sleep.o(i._ZN5Sleep10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = Sleep::viewScreen() &rArr; Clock::viewAnClock(unsigned char) &rArr; Clock::viewCenterDigClock(char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLight(unsigned short)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::turnOff()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerSleep()
</UL>

<P><STRONG><a name="[b4]"></a>Sleep::setLowPower(bool)</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, sleep.o(i._ZN5Sleep11setLowPowerEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config(unsigned)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setTimer(unsigned)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::changeBaudrate(unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::viewScreen()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
</UL>

<P><STRONG><a name="[a9]"></a>Sleep::checkSleepMode()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sleep.o(i._ZN5Sleep14checkSleepModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = Sleep::checkSleepMode() &rArr; Sleep::handler() &rArr; Clock::viewCenterDigClock(char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::getTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerSleep()
</UL>

<P><STRONG><a name="[be]"></a>Sleep::handler()</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, sleep.o(i._ZN5Sleep7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = Sleep::handler() &rArr; Clock::viewCenterDigClock(char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayMs(unsigned)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get(unsigned, unsigned)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::handler()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewCenterDigClock(char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockSecond()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockMinute()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClockHour(char*, signed char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::checkSleepMode()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
</UL>

<P><STRONG><a name="[21d]"></a>Sleep::Sleep()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(i._ZN5SleepC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_sleep_cpp_sleep
</UL>

<P><STRONG><a name="[26e]"></a>Sleep::Sleep__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sleep.o(i._ZN5SleepC1Ev), UNUSED)

<P><STRONG><a name="[f0]"></a>Usart::initialize()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, usart.o(i._ZN5Usart10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Usart::initialize() &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable(unsigned char, unsigned char, unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config(unsigned, unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config(unsigned, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_first_config(unsigned, unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable(unsigned, unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set(unsigned, unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config(unsigned, unsigned)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config(unsigned, unsigned)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config(unsigned, unsigned)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set(unsigned, unsigned)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set(unsigned, unsigned)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable(unsigned)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable(unsigned)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[198]"></a>Usart::changeBaudrate(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart.o(i._ZN5Usart14changeBaudrateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set(unsigned, unsigned)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable(unsigned)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
</UL>

<P><STRONG><a name="[13a]"></a>Usart::processTimeOut()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, usart.o(i._ZN5Usart14processTimeOutEv))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::handler()
</UL>

<P><STRONG><a name="[8a]"></a>Usart::transmitNextByte()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart.o(i._ZN5Usart16transmitNextByteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart::transmitNextByte() &rArr; usart_interrupt_disable(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable(unsigned, unsigned)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>Usart::receiveIntHandler(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart.o(i._ZN5Usart17receiveIntHandlerEh))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>Usart::startTransmission()</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, usart.o(i._ZN5Usart17startTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Usart::startTransmission() &rArr; usart_interrupt_enable(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable(unsigned, unsigned)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::handler()
</UL>

<P><STRONG><a name="[13d]"></a>Usart::processReceivedData()</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, usart.o(i._ZN5Usart19processReceivedDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart::processReceivedData()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::handler()
</UL>

<P><STRONG><a name="[21e]"></a>Usart::Usart()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._ZN5UsartC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_usart_cpp_usart
</UL>

<P><STRONG><a name="[26f]"></a>Usart::Usart__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usart.o(i._ZN5UsartC1Ev), UNUSED)

<P><STRONG><a name="[10e]"></a>Canvas::drawSlider(short, short, unsigned char, char)</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, canvas.o(i._ZN6Canvas10drawSliderEsshc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Canvas::drawSlider(short, short, unsigned char, char) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
</UL>

<P><STRONG><a name="[18b]"></a>Canvas::writeMinus(unsigned short, unsigned short)</STRONG> (Thumb, 130 bytes, Stack size 112 bytes, canvas.o(i._ZN6Canvas10writeMinusEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Canvas::writeMinus(unsigned short, unsigned short) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
</UL>

<P><STRONG><a name="[1a7]"></a>Canvas::writePixel(short, short, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, canvas.o(i._ZN6Canvas10writePixelEssj))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColor(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffectPoly(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffectRed(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[fb]"></a>Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, canvas.o(i._ZN6Canvas13drawRoundRectEttttjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSliderSlimDouble(short, short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSlider(short, short, unsigned char, char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewWeek(bool)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewHour(bool)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewCorrection(bool)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewMinute(bool)
</UL>

<P><STRONG><a name="[ff]"></a>Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, canvas.o(i._ZN6Canvas13writeFillRectEttttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewTemperature(bool)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewConnect(bool)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewScreen()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewScreen()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSliderSlimDouble(short, short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreenChange()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreenChange()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewCenterDigClock(char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[1aa]"></a>Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned)</STRONG> (Thumb, 1144 bytes, Stack size 64 bytes, canvas.o(i._ZN6Canvas14drawSliderSlimEsshbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[153]"></a>Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, canvas.o(i._ZN6Canvas14loadImageColorEttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[100]"></a>Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 328 bytes, Stack size 72 bytes, canvas.o(i._ZN6Canvas15loadImageEffectEttjjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixel(short, short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewButton()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewMode()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewMode()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::checkDayNight()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::viewScreen()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, bool)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::draw(unsigned short, unsigned short, const char*, char*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewCenterDigClock(char)
</UL>

<P><STRONG><a name="[1b0]"></a>Canvas::writePixelCount(short, short, unsigned*, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, canvas.o(i._ZN6Canvas15writePixelCountEssPjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Canvas::writePixelCount(short, short, unsigned*, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
</UL>

<P><STRONG><a name="[1b1]"></a>Canvas::writePixelDouble(short, short, unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, canvas.o(i._ZN6Canvas16writePixelDoubleEssjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Canvas::writePixelDouble(short, short, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
</UL>

<P><STRONG><a name="[1b2]"></a>Canvas::loadImageEffectRed(unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, canvas.o(i._ZN6Canvas18loadImageEffectRedEttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Canvas::loadImageEffectRed(unsigned short, unsigned short, unsigned, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixel(short, short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewMode()
</UL>

<P><STRONG><a name="[154]"></a>Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned)</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, canvas.o(i._ZN6Canvas18loadImageOverColorEttjjhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixel(short, short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1b3]"></a>Canvas::loadImageEffectPoly(unsigned short, unsigned short, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, canvas.o(i._ZN6Canvas19loadImageEffectPolyEttjjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Canvas::loadImageEffectPoly(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixel(short, short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration()
</UL>

<P><STRONG><a name="[1b4]"></a>Canvas::drawSliderSlimDouble(short, short, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 976 bytes, Stack size 72 bytes, canvas.o(i._ZN6Canvas20drawSliderSlimDoubleEsshhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Canvas::drawSliderSlimDouble(short, short, unsigned char, unsigned char, unsigned char) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDouble(unsigned short, unsigned short, unsigned char, unsigned char, const char*, bool, bool*, unsigned char)
</UL>

<P><STRONG><a name="[179]"></a>Canvas::clearDot(unsigned short, unsigned short, char, char)</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, canvas.o(i._ZN6Canvas8clearDotEttcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Canvas::clearDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::clearDrawSecond(unsigned short, unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::clearDrawMinute(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[15e]"></a>Canvas::writeDot(unsigned short, unsigned short, char, char)</STRONG> (Thumb, 2642 bytes, Stack size 32 bytes, canvas.o(i._ZN6Canvas8writeDotEttcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Canvas::writeDot(unsigned short, unsigned short, char, char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawSecond(unsigned short, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawMinute(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[15a]"></a>Canvas::loadImage(unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, canvas.o(i._ZN6Canvas9loadImageEttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Canvas::loadImage(unsigned short, unsigned short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewScreen()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::viewScreen()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[18c]"></a>Canvas::writePlus(unsigned short, unsigned short)</STRONG> (Thumb, 130 bytes, Stack size 112 bytes, canvas.o(i._ZN6Canvas9writePlusEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Canvas::writePlus(unsigned short, unsigned short) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
</UL>

<P><STRONG><a name="[20c]"></a>Canvas::Canvas()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canvas.o(i._ZN6CanvasC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_canvas_cpp_canvas
</UL>

<P><STRONG><a name="[270]"></a>Canvas::Canvas__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, canvas.o(i._ZN6CanvasC1Ev), UNUSED)

<P><STRONG><a name="[f3]"></a>Memory::lockMemory(bool)</STRONG> (Thumb, 932 bytes, Stack size 24 bytes, memory.o(i._ZN6Memory10lockMemoryEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Memory::lockMemory(bool) &rArr; Memory::readStatus() &rArr; Memory::read(unsigned char*, unsigned char) &rArr; Memory::spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned char*, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::volatileWriteEnable()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeDisable()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeEnable()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[1ae]"></a>Memory::quadInInit()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, memory.o(i._ZN6Memory10quadInInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Memory::quadInInit() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[1af]"></a>Memory::quadReceiv()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, memory.o(i._ZN6Memory10quadReceivEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Memory::quadReceiv()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[1b9]"></a>Memory::readStatus()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, memory.o(i._ZN6Memory10readStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Memory::readStatus() &rArr; Memory::read(unsigned char*, unsigned char) &rArr; Memory::spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
</UL>

<P><STRONG><a name="[1ac]"></a>Memory::quadOutInit()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, memory.o(i._ZN6Memory11quadOutInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Memory::quadOutInit() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::powerUp()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::volatileWriteEnable()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeDisable()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeEnable()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[1b8]"></a>Memory::writeEnable()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, memory.o(i._ZN6Memory11writeEnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Memory::writeEnable() &rArr; Memory::quadOutInit() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
</UL>

<P><STRONG><a name="[1ba]"></a>Memory::writeDisable()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, memory.o(i._ZN6Memory12writeDisableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Memory::writeDisable() &rArr; Memory::quadOutInit() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
</UL>

<P><STRONG><a name="[f2]"></a>Memory::initializeQuad()</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, memory.o(i._ZN6Memory14initializeQuadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Memory::initializeQuad() &rArr; Memory::ident() &rArr; Memory::write(unsigned char*, unsigned char) &rArr; Memory::spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayMs(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayUs(unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::powerUp()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initSpi()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned char*, unsigned char)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[1b7]"></a>Memory::volatileWriteEnable()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, memory.o(i._ZN6Memory19volatileWriteEnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Memory::volatileWriteEnable() &rArr; Memory::quadOutInit() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
</UL>

<P><STRONG><a name="[1b6]"></a>Memory::read(unsigned char*, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, memory.o(i._ZN6Memory4readEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Memory::read(unsigned char*, unsigned char) &rArr; Memory::spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[1bd]"></a>Memory::ident()</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, memory.o(i._ZN6Memory5identEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Memory::ident() &rArr; Memory::write(unsigned char*, unsigned char) &rArr; Memory::spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write(unsigned char*, unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
</UL>

<P><STRONG><a name="[1be]"></a>Memory::write(unsigned char*, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memory.o(i._ZN6Memory5writeEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Memory::write(unsigned char*, unsigned char) &rArr; Memory::spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
</UL>

<P><STRONG><a name="[1bb]"></a>Memory::initSpi()</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, memory.o(i._ZN6Memory7initSpiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Memory::initSpi() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config(unsigned, EventStatus)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
</UL>

<P><STRONG><a name="[1bc]"></a>Memory::powerUp()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, memory.o(i._ZN6Memory7powerUpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Memory::powerUp() &rArr; Memory::quadOutInit() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
</UL>

<P><STRONG><a name="[1b5]"></a>Memory::spiSend(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, memory.o(i._ZN6Memory7spiSendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Memory::spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::initializeQuad()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::powerUp()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write(unsigned char*, unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned char*, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::volatileWriteEnable()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeDisable()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeEnable()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[1ad]"></a>Memory::quadSend(unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, memory.o(i._ZN6Memory8quadSendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Memory::quadSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::lockMemory(bool)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::powerUp()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::ident()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::volatileWriteEnable()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeDisable()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::writeEnable()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readStatus()
</UL>

<P><STRONG><a name="[1ab]"></a>Memory::readPage(unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, memory.o(i._ZN6Memory8readPageEPhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Memory::readPage(unsigned char*, unsigned, unsigned) &rArr; Memory::quadOutInit() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::spiSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffectPoly(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffectRed(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[b9]"></a>Search::viewScreen()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, search.o(i._ZN6Search10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Search::viewScreen() &rArr; Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned) &rArr; Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySearch()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
</UL>

<P><STRONG><a name="[1c0]"></a>Search::sensorCheck()</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, search.o(i._ZN6Search11sensorCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Search::sensorCheck()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewHandler()
</UL>

<P><STRONG><a name="[1c1]"></a>Search::viewConnect(bool)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, search.o(i._ZN6Search11viewConnectEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Search::viewConnect(bool) &rArr; Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewHandler()
</UL>

<P><STRONG><a name="[c6]"></a>Search::viewHandler()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, search.o(i._ZN6Search11viewHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Search::viewHandler() &rArr; Search::viewConnect(bool) &rArr; Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewConnect(bool)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::sensorCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySearch()
</UL>

<P><STRONG><a name="[20d]"></a>Search::Search()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, search.o(i._ZN6SearchC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_search_cpp_search
</UL>

<P><STRONG><a name="[271]"></a>Search::Search__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, search.o(i._ZN6SearchC1Ev), UNUSED)

<P><STRONG><a name="[1c2]"></a>Sensor::initButton()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sensor.o(i._ZN6Sensor10initButtonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sensor::initButton() &rArr; nvic_irq_enable(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable(unsigned char, unsigned char, unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init(exti_line_enum, exti_mode_enum, exti_trig_type_enum)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear(exti_line_enum)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
</UL>

<P><STRONG><a name="[f5]"></a>Sensor::initialize()</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, sensor.o(i._ZN6Sensor10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Sensor::initialize() &rArr; i2c_clock_config(unsigned, unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayMs(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable(unsigned char, unsigned char, unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init(exti_line_enum, exti_mode_enum, exti_trig_type_enum)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear(exti_line_enum)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select(unsigned char, unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config(unsigned, unsigned, unsigned)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config(unsigned, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable(unsigned)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit(unsigned)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initButton()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::testProg()
</UL>

<P><STRONG><a name="[1c8]"></a>Sensor::read(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, sensor.o(i._ZN6Sensor4readEPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sensor::read(unsigned char*, unsigned char, unsigned char) &rArr; i2c_flag_get(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing(unsigned, unsigned, unsigned)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit(unsigned, unsigned char)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ackpos_config(unsigned, unsigned)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus(unsigned)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive(unsigned)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus(unsigned)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config(unsigned, unsigned)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get(unsigned, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::testProg()
</UL>

<P><STRONG><a name="[c1]"></a>Sensor::handler()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sensor.o(i._ZN6Sensor7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Sensor::handler() &rArr; Sensor::testProg() &rArr; Sensor::initialize() &rArr; i2c_clock_config(unsigned, unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::testProg()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::handler()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerSensor()
</UL>

<P><STRONG><a name="[1d0]"></a>Sensor::testProg()</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, sensor.o(i._ZN6Sensor8testProgEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Sensor::testProg() &rArr; Sensor::initialize() &rArr; i2c_clock_config(unsigned, unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::initialize()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::handler()
</UL>

<P><STRONG><a name="[18e]"></a>Slider::drawDouble(unsigned short, unsigned short, unsigned char, unsigned char, const char*, bool, bool*, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, slider.o(i._ZN6Slider10drawDoubleEtthhPKcbPbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Slider::drawDouble(unsigned short, unsigned short, unsigned char, unsigned char, const char*, bool, bool*, unsigned char) &rArr; Canvas::drawSliderSlimDouble(short, short, unsigned char, unsigned char, unsigned char) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSliderSlimDouble(short, short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
</UL>

<P><STRONG><a name="[f4]"></a>Slider::initialize()</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, slider.o(i._ZN6Slider10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Slider::initialize() &rArr; std::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[1d1]"></a>Slider::viewScreen()</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, slider.o(i._ZN6Slider10viewScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Slider::viewScreen() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setVal(unsigned short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::turnOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[1d3]"></a>Slider::viewString()</STRONG> (Thumb, 1168 bytes, Stack size 72 bytes, slider.o(i._ZN6Slider10viewStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Slider::viewString() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
</UL>

<P><STRONG><a name="[1d4]"></a>Slider::drawDigGrid()</STRONG> (Thumb, 464 bytes, Stack size 80 bytes, slider.o(i._ZN6Slider11drawDigGridEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Slider::drawDigGrid() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::getCorrectXDigGrid(unsigned short, FontDef, unsigned char)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::getPosition(unsigned short*, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[1d5]"></a>Slider::getPosition(unsigned short*, unsigned short*, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, slider.o(i._ZN6Slider11getPositionEPtS0_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Slider::getPosition(unsigned short*, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDigGrid()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::eraseDigGrid()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
</UL>

<P><STRONG><a name="[9c]"></a>Slider::setPosition(short)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, slider.o(i._ZN6Slider11setPositionEs))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::checkDayNight()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
</UL>

<P><STRONG><a name="[1d7]"></a>Slider::textDigGrid(unsigned short, unsigned)</STRONG> (Thumb, 418 bytes, Stack size 72 bytes, slider.o(i._ZN6Slider11textDigGridEtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Slider::textDigGrid(unsigned short, unsigned) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::getCorrectXDigGrid(unsigned short, FontDef, unsigned char)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::getPosition(unsigned short*, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::clearDigRight(unsigned short)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewDigRight(unsigned short)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::clearDigLeft(unsigned short)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewDigLeft(unsigned short)
</UL>

<P><STRONG><a name="[1d8]"></a>Slider::viewDigLeft(unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, slider.o(i._ZN6Slider11viewDigLeftEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Slider::viewDigLeft(unsigned short) &rArr; Slider::textDigGrid(unsigned short, unsigned) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::checkDigGrid(unsigned short)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
</UL>

<P><STRONG><a name="[1d9]"></a>Slider::checkDigGrid(unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, slider.o(i._ZN6Slider12checkDigGridEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Slider::checkDigGrid(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::clearDigRight(unsigned short)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewDigRight(unsigned short)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::clearDigLeft(unsigned short)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewDigLeft(unsigned short)
</UL>

<P><STRONG><a name="[1da]"></a>Slider::clearDigLeft(unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, slider.o(i._ZN6Slider12clearDigLeftEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Slider::clearDigLeft(unsigned short) &rArr; Slider::textDigGrid(unsigned short, unsigned) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::checkDigGrid(unsigned short)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
</UL>

<P><STRONG><a name="[1db]"></a>Slider::eraseDigGrid()</STRONG> (Thumb, 460 bytes, Stack size 80 bytes, slider.o(i._ZN6Slider12eraseDigGridEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Slider::eraseDigGrid() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::getCorrectXDigGrid(unsigned short, FontDef, unsigned char)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::getPosition(unsigned short*, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1dc]"></a>Slider::viewDigRight(unsigned short)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, slider.o(i._ZN6Slider12viewDigRightEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Slider::viewDigRight(unsigned short) &rArr; Slider::textDigGrid(unsigned short, unsigned) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::checkDigGrid(unsigned short)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
</UL>

<P><STRONG><a name="[1dd]"></a>Slider::viewGridSens(unsigned short, unsigned, bool)</STRONG> (Thumb, 942 bytes, Stack size 24 bytes, slider.o(i._ZN6Slider12viewGridSensEtjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Slider::viewGridSens(unsigned short, unsigned, bool) &rArr; Canvas::writePixelDouble(short, short, unsigned, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelDouble(short, short, unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[1de]"></a>Slider::viewPosition()</STRONG> (Thumb, 982 bytes, Stack size 48 bytes, slider.o(i._ZN6Slider12viewPositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Slider::viewPosition() &rArr; Slider::clearDigRight(unsigned short) &rArr; Slider::textDigGrid(unsigned short, unsigned) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGrid(unsigned short, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridInvert(unsigned short, unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::clearDigRight(unsigned short)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewDigRight(unsigned short)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::clearDigLeft(unsigned short)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewDigLeft(unsigned short)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewString()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
</UL>

<P><STRONG><a name="[1e0]"></a>Slider::clearDigRight(unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, slider.o(i._ZN6Slider13clearDigRightEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Slider::clearDigRight(unsigned short) &rArr; Slider::textDigGrid(unsigned short, unsigned) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::checkDigGrid(unsigned short)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
</UL>

<P><STRONG><a name="[1e1]"></a>Slider::viewGridInvert(unsigned short, unsigned)</STRONG> (Thumb, 726 bytes, Stack size 104 bytes, slider.o(i._ZN6Slider14viewGridInvertEtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Slider::viewGridInvert(unsigned short, unsigned) &rArr; Canvas::writePixelCount(short, short, unsigned*, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelCount(short, short, unsigned*, unsigned char)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
</UL>

<P><STRONG><a name="[1d6]"></a>Slider::getCorrectXDigGrid(unsigned short, FontDef, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, slider.o(i._ZN6Slider18getCorrectXDigGridEt7FontDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Slider::getCorrectXDigGrid(unsigned short, FontDef, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDigGrid()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::eraseDigGrid()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::textDigGrid(unsigned short, unsigned)
</UL>

<P><STRONG><a name="[1d2]"></a>Slider::setVal(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, slider.o(i._ZN6Slider6setValEt))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewScreen()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[192]"></a>Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char)</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, slider.o(i._ZN6Slider8drawSlimEttfPKcbPbbjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Slider::drawSlim(unsigned short, unsigned short, float, const char*, bool, bool*, bool, unsigned, unsigned char) &rArr; Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTimer()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
</UL>

<P><STRONG><a name="[187]"></a>Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char)</STRONG> (Thumb, 572 bytes, Stack size 104 bytes, slider.o(i._ZN6Slider8drawSlimEttfPKctcbPbbjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = Slider::drawSlim(unsigned short, unsigned short, float, const char*, unsigned short, char, bool, bool*, bool, unsigned, unsigned char) &rArr; Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned) &rArr; Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned) &rArr; Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTimer()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawSliderSlim(short, short, unsigned char, bool, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen10(unsigned char)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen1(unsigned char)
</UL>

<P><STRONG><a name="[1df]"></a>Slider::viewGrid(unsigned short, unsigned)</STRONG> (Thumb, 722 bytes, Stack size 104 bytes, slider.o(i._ZN6Slider8viewGridEtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Slider::viewGrid(unsigned short, unsigned) &rArr; Canvas::writePixelCount(short, short, unsigned*, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::readPage(unsigned char*, unsigned, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadSend(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadOutInit()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadReceiv()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::quadInInit()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelCount(short, short, unsigned*, unsigned char)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
</UL>

<P><STRONG><a name="[1e2]"></a>Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, slider.o(i._ZN6Slider9setMinMaxEshhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Slider::drawDigGrid() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setVal(unsigned short)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDigGrid()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::initialize()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::eraseDigGrid()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[b2]"></a>System::viewScreen(bool)</STRONG> (Thumb, 666 bytes, Stack size 40 bytes, system.o(i._ZN6System10viewScreenEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = System::viewScreen(bool) &rArr; Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Slider::drawDigGrid() &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setMinMax(short, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setVal(unsigned short)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewGridSens(unsigned short, unsigned, bool)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::drawDigGrid()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewScreen()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewMode()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewTemperature(bool)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityStartTimers()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetupClock()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySearch()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetup()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAbout()
</UL>

<P><STRONG><a name="[1e6]"></a>System::buttonCheck(unsigned char)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, system.o(i._ZN6System11buttonCheckEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System::buttonCheck(unsigned char) &rArr; Core::delayMs(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayMs(unsigned)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get(unsigned, unsigned)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::buttonPress()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
</UL>

<P><STRONG><a name="[1e7]"></a>System::buttonPress()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i._ZN6System11buttonPressEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::buttonCheck(unsigned char)
</UL>

<P><STRONG><a name="[195]"></a>System::changeScale(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, system.o(i._ZN6System11changeScaleEhhhhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System::changeScale(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen15(unsigned char)
</UL>

<P><STRONG><a name="[1e4]"></a>System::sensorCheck()</STRONG> (Thumb, 2428 bytes, Stack size 96 bytes, system.o(i._ZN6System11sensorCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = System::sensorCheck() &rArr; Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration(bool, unsigned short)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTimer()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::setTimer(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setPosition(short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[a0]"></a>System::viewHandler()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, system.o(i._ZN6System11viewHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = System::viewHandler() &rArr; Slider::viewPosition() &rArr; Slider::clearDigRight(unsigned short) &rArr; Slider::textDigGrid(unsigned short, unsigned) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewPosition()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewButton()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewMode()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewTemperature(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::checkConnect()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::buttonCheck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
</UL>

<P><STRONG><a name="[1ec]"></a>System::viewMessage(char*)</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, system.o(i._ZN6System11viewMessageEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = System::viewMessage(char*) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewDuration()
</UL>

<P><STRONG><a name="[1eb]"></a>System::checkConnect()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system.o(i._ZN6System12checkConnectEv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
</UL>

<P><STRONG><a name="[1e8]"></a>System::viewDuration(bool, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system.o(i._ZN6System12viewDurationEbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System::viewDuration(bool, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
</UL>

<P><STRONG><a name="[1ea]"></a>System::viewDuration()</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, system.o(i._ZN6System12viewDurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = System::viewDuration() &rArr; System::viewMessage(char*) &rArr; Text::writeStringOver(short, short, char*, FontDef, unsigned, unsigned, unsigned char) &rArr; Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffectPoly(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewMessage(char*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::charToString(char*, const char*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
</UL>

<P><STRONG><a name="[1ed]"></a>System::checkDayNight()</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, system.o(i._ZN6System13checkDayNightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = System::checkDayNight() &rArr; Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setPosition(short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>System::viewTemperature(bool)</STRONG> (Thumb, 924 bytes, Stack size 64 bytes, system.o(i._ZN6System15viewTemperatureEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = System::viewTemperature(bool) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::farToCel(float)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::decToString(char*, int)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[1e3]"></a>System::viewMode()</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, system.o(i._ZN6System8viewModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = System::viewMode() &rArr; Canvas::loadImageEffectRed(unsigned short, unsigned short, unsigned, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffectRed(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewHandler()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::viewScreen(bool)
</UL>

<P><STRONG><a name="[20e]"></a>System::System(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, system.o(i._ZN6SystemC1Ehhhhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System::System(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_system_cpp_air
</UL>

<P><STRONG><a name="[272]"></a>System::System__sub_object(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, system.o(i._ZN6SystemC1Ehhhhhhhh), UNUSED)

<P><STRONG><a name="[1ee]"></a>Display::initPeriph()</STRONG> (Thumb, 350 bytes, Stack size 72 bytes, display.o(i._ZN7Display10initPeriphEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Display::initPeriph() &rArr; gpio_init(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable(unsigned)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable(rcu_periph_enum)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init(unsigned, spi_parameter_struct*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_output_trigger_source_select(unsigned, unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config(unsigned, unsigned short, unsigned)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config(unsigned, unsigned short, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config(unsigned, unsigned short, unsigned short)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_fast_config(unsigned, unsigned short, unsigned short)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_disable(unsigned)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config(unsigned, unsigned char)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config(unsigned, EventStatus)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config(unsigned, unsigned short, timer_oc_parameter_struct*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit(unsigned)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init(unsigned, timer_parameter_struct*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable(unsigned)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config(unsigned, EventStatus)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initialize()
</UL>

<P><STRONG><a name="[ee]"></a>Display::initialize()</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, display.o(i._ZN7Display10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Display::initialize() &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::delayMs(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initPeriph()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
</UL>

<P><STRONG><a name="[152]"></a>Display::writeColor(unsigned)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, display.o(i._ZN7Display10writeColorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Display::writeColor(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixel(short, short, unsigned)
</UL>

<P><STRONG><a name="[1a8]"></a>Display::writeCommand(unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, display.o(i._ZN7Display12writeCommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Display::writeCommand(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit(unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::switchOn()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initialize()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::turnOff()
</UL>

<P><STRONG><a name="[151]"></a>Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, display.o(i._ZN7Display13setAddrWindowEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelDouble(short, short, unsigned, unsigned)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelCount(short, short, unsigned*, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeCharOver(unsigned short, unsigned short, char, FontDef, unsigned, unsigned, unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixel(short, short, unsigned)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::clearDot(unsigned short, unsigned short, char, char)
</UL>

<P><STRONG><a name="[157]"></a>Display::writeColorFast(unsigned)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, display.o(i._ZN7Display14writeColorFastEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Display::writeColorFast(unsigned) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelDouble(short, short, unsigned, unsigned)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePixelCount(short, short, unsigned*, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageColor(unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeChar(unsigned short, unsigned short, char, FontDef, unsigned, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImage(unsigned short, unsigned short, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writePlus(unsigned short, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeMinus(unsigned short, unsigned short)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeDot(unsigned short, unsigned short, char, char)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::clearDot(unsigned short, unsigned short, char, char)
</UL>

<P><STRONG><a name="[10b]"></a>Display::turnOff()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i._ZN7Display7turnOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Display::turnOff() &rArr; Display::writeCommand(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewScreen()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::viewScreen()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::viewScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[199]"></a>Display::getTimer()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, display.o(i._ZN7Display8getTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display::getTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::checkSleepMode()
</UL>

<P><STRONG><a name="[b6]"></a>Display::setLight(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, display.o(i._ZN7Display8setLightEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display::setLight(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config(unsigned, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::viewScreen()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen1(unsigned char)
</UL>

<P><STRONG><a name="[c2]"></a>Display::setTimer(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, display.o(i._ZN7Display8setTimerEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display::setTimer(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerSensor()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>

<P><STRONG><a name="[b5]"></a>Display::switchOn()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i._ZN7Display8switchOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Display::switchOn() &rArr; Display::writeCommand(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::viewScreen()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewScreen()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::viewScreen()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::viewScreen()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::viewAnClock(unsigned char)
</UL>

<P><STRONG><a name="[1a9]"></a>Display::writeData(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, display.o(i._ZN7Display9writeDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get(unsigned, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset(unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set(unsigned, unsigned)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit(unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::writeFillRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initialize()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColorFast(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::writeColor(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::drawRoundRect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1fc]"></a>Display::Display()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i._ZN7DisplayC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display::Display() &rArr; Display::setTimer(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setTimer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_display_cpp_display
</UL>

<P><STRONG><a name="[273]"></a>Display::Display__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, display.o(i._ZN7DisplayC1Ev), UNUSED)

<P><STRONG><a name="[188]"></a>Checkbox::draw(unsigned short, unsigned short, const char*, char*)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, checkbox.o(i._ZN8Checkbox4drawEttPKcPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Checkbox::draw(unsigned short, unsigned short, const char*, char*) &rArr; Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen15(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen10(unsigned char)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen1(unsigned char)
</UL>

<P><STRONG><a name="[18d]"></a>Checkbox::draw(unsigned short, unsigned short, const char*, bool)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, checkbox.o(i._ZN8Checkbox4drawEttPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Checkbox::draw(unsigned short, unsigned short, const char*, bool) &rArr; Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::loadImageEffect(unsigned short, unsigned short, unsigned, unsigned, unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::writeString(unsigned short, unsigned short, const char*, FontDef, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
</UL>

<P><STRONG><a name="[210]"></a>Checkbox::Checkbox()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, checkbox.o(i._ZN8CheckboxC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_checkbox_cpp_checkbox
</UL>

<P><STRONG><a name="[274]"></a>Checkbox::Checkbox__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, checkbox.o(i._ZN8CheckboxC1Ev), UNUSED)

<P><STRONG><a name="[177]"></a>UnixTime::calToTimer()</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, unix_time.o(i._ZN8UnixTime10calToTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UnixTime::calToTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeRegulate()
</UL>

<P><STRONG><a name="[167]"></a>UnixTime::timerToCal(unsigned long)</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, unix_time.o(i._ZN8UnixTime10timerToCalEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnixTime::timerToCal(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeUpdate()
</UL>

<P><STRONG><a name="[1fd]"></a>RVCModule::ProcessMessage(unsigned char)</STRONG> (Thumb, 1318 bytes, Stack size 56 bytes, rvc.o(i._ZN9RVCModule14ProcessMessageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RVCModule::ProcessMessage(unsigned char) &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::setPosition(short)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::celToFar(float)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
</UL>

<P><STRONG><a name="[1ff]"></a>RVCModule::TransmitMessage()</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, rvc.o(i._ZN9RVCModule15TransmitMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RVCModule::TransmitMessage() &rArr; CAN_PGN_RVC::msgWaterHeater() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::getTick()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgTimers()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgCirculationPumpStatus()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostatSchedule1(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgDiagnosticMessage()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater2()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat2()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat1()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgAmbientTemp()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgHeaterInfo()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgExtMessage()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgFurnace()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
</UL>

<P><STRONG><a name="[200]"></a>RVCModule::handler()</STRONG> (Thumb, 756 bytes, Stack size 24 bytes, rvc.o(i._ZN9RVCModule7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RVCModule::handler() &rArr; RVCModule::TransmitMessage() &rArr; CAN_PGN_RVC::msgWaterHeater() &rArr; Can::SendMessage(unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::farToCel(float)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgCirculationPumpStatus()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostatSchedule1(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgDiagnosticMessage()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater2()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat2()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgThermostat1()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgExtMessage()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgFurnace()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[217]"></a>RVCModule::RVCModule()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rvc.o(i._ZN9RVCModuleC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_rvc_cpp_rvc
</UL>

<P><STRONG><a name="[275]"></a>RVCModule::RVCModule__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rvc.o(i._ZN9RVCModuleC1Ev), UNUSED)

<P><STRONG><a name="[161]"></a>std::cos(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, slider.o(i._ZSt3cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = std::cos(float) &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::initialize()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::initialize()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
</UL>

<P><STRONG><a name="[16b]"></a>std::pow(float, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, clock.o(i._ZSt3powfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
</UL>

<P><STRONG><a name="[160]"></a>std::sin(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, slider.o(i._ZSt3sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::initialize()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::initialize()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
</UL>

<P><STRONG><a name="[16c]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, clock.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::sensorCheck()
</UL>

<P><STRONG><a name="[209]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[138]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::handler()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::TransmitMessage()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::timeUpdate()
</UL>

<P><STRONG><a name="[201]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
</UL>

<P><STRONG><a name="[130]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::steinhartHartEquation(float)
</UL>

<P><STRONG><a name="[276]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[202]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
</UL>

<P><STRONG><a name="[277]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[203]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
</UL>

<P><STRONG><a name="[1e9]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::sensorCheck()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>

<P><STRONG><a name="[207]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[206]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[20b]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[205]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[208]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[20a]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[204]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = main &rArr; activityAir() &rArr; Setup::viewScreen() &rArr; Setup::viewPage(unsigned char, unsigned char) &rArr; Setup::viewScreen11(unsigned char) &rArr; Text::writeDigit(unsigned short, unsigned short, const char*, unsigned, unsigned char) &rArr; Text::writeOneDigit(unsigned short, unsigned short, char, unsigned, unsigned char) &rArr; Canvas::loadImageOverColor(unsigned short, unsigned short, unsigned, unsigned, unsigned char, unsigned) &rArr; Canvas::writePixel(short, short, unsigned) &rArr; Display::setAddrWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Display::writeData(unsigned char) &rArr; Sleep::setLowPower(bool) &rArr; Usart::changeBaudrate(unsigned) &rArr; usart_baudrate_set(unsigned, unsigned) &rArr; rcu_clock_freq_get(rcu_clock_freq_enum)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::handler()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLight(unsigned short)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::checkDayNight()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::changeScale(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::viewScreen()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::handler()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewKey()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSetup()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNewId()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAll()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityStartTimers()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerTemperature()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetupClock()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySearch()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerSensor()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySleep()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activitySetup()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityError()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAbout()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerUsart()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerTimer()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerSleep()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlerClock()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::request()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
</UL>

<P><STRONG><a name="[21f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::request()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
</UL>

<P><STRONG><a name="[222]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[229]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::request()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
</UL>

<P><STRONG><a name="[225]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
</UL>

<P><STRONG><a name="[226]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgAmbientTemp()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgExtMessage()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
</UL>

<P><STRONG><a name="[227]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::request()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgAmbientTemp()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgExtMessage()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
</UL>

<P><STRONG><a name="[278]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::parsing()
</UL>

<P><STRONG><a name="[279]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
</UL>

<P><STRONG><a name="[228]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[22c]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::initialize()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen13(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::viewScreen(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgWaterHeater()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgAmbientTemp()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::msgExtMessage()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::drawHour(unsigned short, char)
</UL>

<P><STRONG><a name="[22a]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[221]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[224]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityAir()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
</UL>

<P><STRONG><a name="[22b]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::viewScreen11(unsigned char)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
</UL>

<P><STRONG><a name="[22d]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::ProcessMessage(unsigned char)
</UL>

<P><STRONG><a name="[22f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[230]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[69]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[27a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[27b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[220]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__sti___10_search_cpp_search</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, search.o(i.__sti___10_search_cpp_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___10_search_cpp_search
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search::Search()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> search.o(.init_array)
</UL>
<P><STRONG><a name="[4d]"></a>__sti___9_error_cpp_error</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, error.o(i.__sti___9_error_cpp_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_error_cpp_error
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error::Error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> error.o(.init_array)
</UL>
<P><STRONG><a name="[4e]"></a>__sti___10_system_cpp_air</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, system.o(i.__sti___10_system_cpp_air))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sti___10_system_cpp_air &rArr; System::System(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::System(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.init_array)
</UL>
<P><STRONG><a name="[c3]"></a>SysTick_Config(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sleep.o(i._Z14SysTick_Configj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config(unsigned) &rArr; __NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
</UL>

<P><STRONG><a name="[c4]"></a>__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sleep.o(i._Z18__NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config(unsigned)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::setLowPower(bool)
</UL>

<P><STRONG><a name="[4f]"></a>__sti___9_sleep_cpp_sleep</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, sleep.o(i.__sti___9_sleep_cpp_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_sleep_cpp_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep::Sleep()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.init_array)
</UL>
<P><STRONG><a name="[50]"></a>__sti___16_start_timers_cpp_1ec715f4</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, start_timers.o(i.__sti___16_start_timers_cpp_1ec715f4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___16_start_timers_cpp_1ec715f4
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimers::StartTimers()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_timers.o(.init_array)
</UL>
<P><STRONG><a name="[51]"></a>__sti___9_setup_cpp_setup</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, setup.o(i.__sti___9_setup_cpp_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_setup_cpp_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup::Setup()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup.o(.init_array)
</UL>
<P><STRONG><a name="[52]"></a>__sti___15_setup_clock_cpp_ccf099aa</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, setup_clock.o(i.__sti___15_setup_clock_cpp_ccf099aa))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___15_setup_clock_cpp_ccf099aa
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock::SetupClock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup_clock.o(.init_array)
</UL>
<P><STRONG><a name="[53]"></a>__sti___9_about_cpp_about</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, about.o(i.__sti___9_about_cpp_about))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_about_cpp_about
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;About::About()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> about.o(.init_array)
</UL>
<P><STRONG><a name="[54]"></a>__sti___8_text_cpp_text</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, text.o(i.__sti___8_text_cpp_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___8_text_cpp_text
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::Text()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text.o(.init_array)
</UL>
<P><STRONG><a name="[55]"></a>__sti___15_start_timer_cpp_c98decc7</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, start_timer.o(i.__sti___15_start_timer_cpp_c98decc7))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___15_start_timer_cpp_c98decc7
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer::StartTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_timer.o(.init_array)
</UL>
<P><STRONG><a name="[56]"></a>__sti___10_slider_cpp_slider</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, slider.o(i.__sti___10_slider_cpp_slider))
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.init_array)
</UL>
<P><STRONG><a name="[57]"></a>__sti___12_checkbox_cpp_checkbox</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, checkbox.o(i.__sti___12_checkbox_cpp_checkbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___12_checkbox_cpp_checkbox
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkbox::Checkbox()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkbox.o(.init_array)
</UL>
<P><STRONG><a name="[58]"></a>__sti___9_clock_cpp_clock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, clock.o(i.__sti___9_clock_cpp_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___9_clock_cpp_clock &rArr; Clock::Clock() &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::Clock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.init_array)
</UL>
<P><STRONG><a name="[142]"></a>__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, core.o(i._Z18__NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::initialize()
</UL>

<P><STRONG><a name="[59]"></a>__sti___8_core_cpp_core</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, core.o(i.__sti___8_core_cpp_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___8_core_cpp_core
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core::Core()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> core.o(.init_array)
</UL>
<P><STRONG><a name="[5a]"></a>__sti___10_canvas_cpp_canvas</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, canvas.o(i.__sti___10_canvas_cpp_canvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___10_canvas_cpp_canvas
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas::Canvas()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvas.o(.init_array)
</UL>
<P><STRONG><a name="[5b]"></a>__sti___7_can_cpp_can</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, can.o(i.__sti___7_can_cpp_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __sti___7_can_cpp_can &rArr; Can::Can()
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Can()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.init_array)
</UL>
<P><STRONG><a name="[5c]"></a>__sti___7_rvc_cpp_rvc</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, rvc.o(i.__sti___7_rvc_cpp_rvc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___7_rvc_cpp_rvc
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVCModule::RVCModule()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rvc.o(.init_array)
</UL>
<P><STRONG><a name="[5d]"></a>__sti___11_pgn_rvc_cpp_b5b58dd4</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, pgn_rvc.o(i.__sti___11_pgn_rvc_cpp_b5b58dd4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___11_pgn_rvc_cpp_b5b58dd4
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PGN_RVC::CAN_PGN_RVC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pgn_rvc.o(.init_array)
</UL>
<P><STRONG><a name="[5e]"></a>__sti___15_temperature_cpp_be4e2a6c</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, temperature.o(i.__sti___15_temperature_cpp_be4e2a6c))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___15_temperature_cpp_be4e2a6c
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::Temperature()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(.init_array)
</UL>
<P><STRONG><a name="[5f]"></a>__sti___11_display_cpp_display</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.__sti___11_display_cpp_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___11_display_cpp_display &rArr; Display::Display() &rArr; Display::setTimer(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.init_array)
</UL>
<P><STRONG><a name="[60]"></a>__sti___7_hcu_cpp_hcu</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hcu.o(i.__sti___7_hcu_cpp_hcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___7_hcu_cpp_hcu
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcu::Hcu()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hcu.o(.init_array)
</UL>
<P><STRONG><a name="[61]"></a>__sti___9_usart_cpp_usart</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, usart.o(i.__sti___9_usart_cpp_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_usart_cpp_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::Usart()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.init_array)
</UL>
<P><STRONG><a name="[93]"></a>dma_periph_and_channel_check(unsigned, dma_channel_enum)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_dma.o(i._Z28dma_periph_and_channel_checkj16dma_channel_enum))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_direction_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_increase_disable(unsigned, dma_channel_enum)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_increase_enable(unsigned, dma_channel_enum)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_address_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_width_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_width_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable(unsigned, dma_channel_enum)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_priority_config(unsigned, dma_channel_enum, unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable(unsigned, dma_channel_enum)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit(unsigned, dma_channel_enum)
</UL>

<P><STRONG><a name="[85]"></a>system_clock_config()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f30x.o(i._Z19system_clock_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config()
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[db]"></a>system_clock_120m_hxtal()</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, system_gd32f30x.o(i._Z23system_clock_120m_hxtalv))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config()
</UL>

<P><STRONG><a name="[22e]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[223]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
